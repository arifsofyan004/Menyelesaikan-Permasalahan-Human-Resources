# -*- coding: utf-8 -*-
"""Submission Pertama: Menyelesaikan Permasalahan Human Resources.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lS1cz-iM7NYQ9jru9E1z38id_TxFfvEC

# Submission Pertama: Menyelesaikan Permasalahan Human Resources

- Nama: Mohamad Arif Sofyan
- Email: arifsofyan004@gmail.com
- Id Dicoding: mohamad_arif_sofyan

# Business Understanding

Perusahaan Jaya Jaya Maju merupakan perusahaan multinasional yang beroperasi sejak 2000, memiliki lebih dari 1000 karyawan di seluruh negeri. Meskipun besar, perusahaan mengalami attrition rate yang tinggi (rasio jumlah karyawan yang keluar dengan total karyawan keseluruhan) hingga lebih dari 10%. Hal ini menunjukkan adanya masalah dalam retensi karyawan dan manajemen sumber daya manusia. Untuk menjaga pertumbuhan dan produktivitas, penting untuk memahami faktor-faktor yang memengaruhi kepuasan dan retensi karyawan.

## Persiapan

Deskripsi kolom dalam dataset:

- **EmployeeId**: Identifikasi unik untuk setiap karyawan.
- **Age**: Usia karyawan.
- **Attrition**: Menunjukkan apakah karyawan tersebut mengundurkan diri ('Yes'), tidak ('No'), atau statusnya tidak diketahui ('Unknown').
- **BusinessTravel**: Frekuensi perjalanan bisnis karyawan ('Travel_Frequently', 'Travel_Rarely', 'Non-Travel').
- **DailyRate**: Tarif harian karyawan.
- **Department**: Departemen di mana karyawan bekerja ('Sales', 'Research & Development', 'Human Resources').
- **DistanceFromHome**: Jarak dari rumah karyawan ke tempat kerja (dalam mil).
- **Education**: Tingkat pendidikan karyawan (1: 'Below College', 2: 'College', 3: 'Bachelor', 4: 'Master', 5: 'Doctor').
- **EducationField**: Bidang pendidikan karyawan ('Life Sciences', 'Medical', 'Marketing', dll.).
- **EmployeeCount**: Jumlah karyawan (konstan, selalu bernilai 1).
- **EnvironmentSatisfaction**: Tingkat kepuasan karyawan terhadap lingkungan kerja (1: 'Low', 2: 'Medium', 3: 'High', 4: 'Very High').
- **Gender**: Jenis kelamin karyawan ('Male' atau 'Female').
- **HourlyRate**: Tarif per jam karyawan.
- **JobInvolvement**: Tingkat keterlibatan karyawan dalam pekerjaan (1: 'Low', 2: 'Medium', 3: 'High', 4: 'Very High').
- **JobLevel**: Tingkat pekerjaan karyawan dalam perusahaan (1, 2, 3, dll.).
- **JobRole**: Peran atau jabatan karyawan dalam perusahaan ('Sales Executive', 'Research Scientist', dll.).
- **JobSatisfaction**: Tingkat kepuasan karyawan terhadap pekerjaan mereka (1: 'Low', 2: 'Medium', 3: 'High', 4: 'Very High').
- **MaritalStatus**: Status perkawinan karyawan ('Single', 'Married', 'Divorced').
- **MonthlyIncome**: Pendapatan bulanan karyawan.
- **MonthlyRate**: Tarif bulanan karyawan.
- **NumCompaniesWorked**: Jumlah perusahaan tempat karyawan telah bekerja sebelumnya.
- **Over18**: Menunjukkan apakah karyawan tersebut berusia di atas 18 tahun (selalu bernilai 'Y').
- **OverTime**: Menunjukkan apakah karyawan tersebut bekerja lembur atau tidak ('Yes' atau 'No').
- **PercentSalaryHike**: Persentase kenaikan gaji terakhir karyawan.
- **PerformanceRating**: Rating kinerja karyawan (1: 'Low', 2: 'Good', 3: 'Excellent', 4: 'Outstanding').
- **RelationshipSatisfaction**: Tingkat kepuasan karyawan terhadap hubungan mereka di tempat kerja (1: 'Low', 2: 'Medium', 3: 'High', 4: 'Very High').
- **StandardHours**: Jam kerja standar (konstan, selalu bernilai 80).
- **StockOptionLevel**: Tingkat opsi saham yang dimiliki karyawan.
- **TotalWorkingYears**: Total tahun bekerja karyawan.
- **TrainingTimesLastYear**: Jumlah pelatihan yang diikuti karyawan tahun lalu.
- **WorkLifeBalance**: Tingkat keseimbangan antara kehidupan kerja dan kehidupan pribadi karyawan (1: 'Bad', 2: 'Good', 3: 'Better', 4: 'Best').
- **YearsAtCompany**: Jumlah tahun karyawan telah bekerja di perusahaan saat ini.
- **YearsInCurrentRole**: Jumlah tahun karyawan telah bekerja dalam peran saat ini.
- **YearsSinceLastPromotion**: Jumlah tahun sejak promosi terakhir karyawan.
- **YearsWithCurrManager**: Jumlah tahun dengan manajer saat ini.

### Menyiapkan library yang dibutuhkan
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import chi2_contingency
import plotly.express as px
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import roc_curve, roc_auc_score
import joblib

"""Mengatur tampilan Pandas"""

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)

"""### Menyiapkan data yang akan diguankan"""

url = "https://raw.githubusercontent.com/arifsofyan004/Menyelesaikan-Permasalahan-Human-Resources/main/employee_data.csv"

df = pd.read_csv(url, index_col='EmployeeId')
df.head()

"""## Data Understanding"""

df.info()

df.isna().sum()

df.duplicated().sum()

"""Mengisi missing value menjadi 2 yang artinya Uknown, untuk memudahkan proses EDA"""

df['Attrition'].fillna(2, inplace=True)
df['Attrition'] = df['Attrition'].astype(int)
df['Attrition'].value_counts()

df.nunique()

""" Menghapus kolom yang memiliki nilai yang sama untuk setiap baris dalam dataset karena tidak memberikan variasi atau kegunaan yang bermanfaat dalam analisis."""

df.drop(['EmployeeCount', 'Over18', 'StandardHours'], axis=1, inplace=True)
df.head()

df.describe(include="all")

"""### Perbandingan Rata-rata Fitur antara Karyawan yang Mengundurkan Diri dan yang Tidak"""

yes = df[df['Attrition'] == 1 ].describe().T
no = df[df['Attrition'] == 0 ].describe().T

colors = ['#003f5c', '#ffa600']

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 10))
plt.subplot(1, 2, 1)
sns.heatmap(yes[['mean']], annot=True, cmap=colors, linewidths=0.4, linecolor='black', cbar=False, fmt='.2f')
plt.title('Mean Values : Karyawan yang Mengundurkan Diri')

plt.subplot(1, 2, 2)
sns.heatmap(no[['mean']], annot=True, cmap=colors, linewidths=0.4, linecolor='black', cbar=False, fmt='.2f')
plt.title('Mean Values : Karyawan yang Tidak Mengundurkan Diri')

fig.tight_layout(pad=2)

plt.show()

"""Dari semua fitur nilai rata-rata untuk karyawan yang mengundurkan diri kebanyakan lebih rendah dari karyawan yang bertahan kecuali kolom DistanceFromHome, MonthlyIncome , NumCompaniesWorked, PercentSalaryHike, dan Performance ranting

### Korelasi antar fitur
"""

correlation_matrix = df.corr(numeric_only = True)

plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Heatmap Korelasi')
plt.show()

"""Pasangan fitur dengan korelasi diatas 0.7"""

numeric_columns = df.select_dtypes(include=np.number).columns
correlation_matrix = df[numeric_columns].corr().abs()

high_corr_pairs = (correlation_matrix > 0.7) & (correlation_matrix < 1)
high_corr_indices = np.where(high_corr_pairs)
high_corr_columns = [(numeric_columns[i], numeric_columns[j]) for i, j in zip(*high_corr_indices) if i < j]

high_corr_columns

df.info()

"""### Korelasi antara Fitur Numerik dengan Attrition"""

attrition_corr = correlation_matrix['Attrition'].sort_values(ascending=False)
attrition_corr

plt.figure(figsize=(12, 10))
sns.heatmap(attrition_corr.to_frame(), cmap='coolwarm', annot=True, fmt=".2f", linewidths=0.5)
plt.title('Korelasi antara Fitur Numerik dengan Attrition')
plt.xlabel('Fitur')
plt.ylabel('Attrition')
plt.show()

"""Hasil tersebut adalah korelasi antara fitur-fitur dalam dataset dengan fitur target "Attrition", fitur-fitur seperti "MonthlyIncome", "JobLevel", "TotalWorkingYears", dan "Age" memiliki korelasi positif yang cukup signifikan dengan "Attrition", menunjukkan bahwa semakin tinggi nilai-nilai ini, semakin tinggi kemungkinan terjadinya attrition. Fitur-fitur lainnya memiliki korelasi yang lebih rendah, tetapi masih berpotensi mempengaruhi attrition dalam tingkat yang lebih kecil."""

df_attrition_subset = df[df['Attrition'].isin([0, 1])]

plt.figure(figsize=(8, 6))
sns.boxplot(x='Attrition', y='MonthlyIncome', data=df_attrition_subset, hue='Attrition', palette='coolwarm', legend=False)
plt.title('Distribusi MonthlyIncome Berdasarkan Attrition')
plt.xlabel('Attrition')
plt.ylabel('MonthlyIncome')
plt.xticks(ticks=[0, 1], labels=['No', 'Yes'])

plt.show()
print("Distribusi MonthlyIncome Berdasarkan Attrition:")
print(df_attrition_subset.groupby('Attrition')['MonthlyIncome'].describe())

"""
Penghasilan bulanan rata-rata lebih tinggi pada karyawan yang tidak mengalami attrition **rata-rata sekitar 6982** dibandingkan dengan yang mengalami attrition **rata-rata sekitar 4872**. Namun, variasi penghasilan bulanan lebih besar pada karyawan yang tidak mengalami attrition. Rekomendasi tindakan yang mungkin termasuk meninjau kembali **kebijakan kompensasi** dan **meningkatkan program pengembangan karyawan**"""

joblevel_att = df[df['Attrition'].isin([0, 1])].groupby(['JobLevel', 'Attrition']).size().unstack()

plt.figure(figsize=(10, 6))
plt.bar(joblevel_att.index, joblevel_att[0], color='skyblue', label='Tidak')
plt.bar(joblevel_att.index, joblevel_att[1], bottom=joblevel_att[0], color='salmon', label='Ya')

plt.xlabel('Job Level')
plt.ylabel('Jumlah')
plt.title('Jumlah Orang Berdasarkan Tingkat Jabatan (Job Level)')

plt.legend()
plt.show()

print("Distribusi jumlah orang berdasarkan tingkat jabatan (Job Level):")
print(joblevel_att)

"""Tingkat attrition tertinggi terjadi di tingkat jabatan 1, sementara semakin tinggi tingkat jabatan, semakin rendah tingkat attrition. Rekomendasi yang dapat dilakukan adalah evaluasi kepuasan kerja di tingkat entry-level dan peningkatan peluang pengembangan karir sehingga bisa mengurangi tingkat attrition secara keseluruhan."""

total_years_att = df[df['Attrition'].isin([0, 1])].groupby(['TotalWorkingYears', 'Attrition']).size().unstack()

plt.figure(figsize=(10, 6))
plt.bar(total_years_att.index, total_years_att[0], color='skyblue', label='Tidak')
plt.bar(total_years_att.index, total_years_att[1], bottom=total_years_att[0], color='salmon', label='Ya')
plt.xlabel('Total Working Years')
plt.ylabel('Jumlah')
plt.title('Jumlah Orang Berdasarkan Total Tahun Kerja (Total Working Years)')

plt.legend()
plt.show()

print("Distribusi jumlah orang berdasarkan total tahun kerja (Total Working Years):")
print(total_years_att)

"""Tingkat attrition cenderung rendah pada karyawan dengan total tahun kerja yang lebih lama. Namun, terlihat sedikit peningkatan attrition pada karyawan dengan total tahun kerja sekitar 1 hingga 5 tahun. Rekomendasi dapat berfokus pada retensi karyawan baru dan peningkatan program pengembangan karir untuk mempertahankan karyawan di tahun-tahun awal mereka."""

age_att = df.groupby(['Age', 'Attrition']).size().unstack()

plt.figure(figsize=(10, 6))

plt.bar(age_att.index, age_att[0], color='skyblue', label='Tidak')
plt.bar(age_att.index, age_att[1], bottom=age_att[0], color='salmon', label='Ya')

plt.xlabel('Usia')
plt.ylabel('Jumlah')
plt.title('Jumlah Orang Berdasarkan Usia')

plt.legend()

plt.show()

# Print hasil plot
print("Distribusi jumlah orang berdasarkan usia:")
print(age_att)

"""Tingkat attrition cenderung meningkat pada karyawan yang berusia muda, khususnya di bawah 30 tahun. Setelah usia 30 tahun, terjadi penurunan dalam tingkat attrition, dan setelah usia 40 tahun, tingkat attrition cenderung stabil. Rekomendasi fokus pada upaya retensi karyawan yang lebih muda, seperti meningkatkan kepuasan kerja, memberikan kesempatan pengembangan karir, dan menawarkan program keseimbangan kerja-hidup yang fleksibel."""

distance_att = df.groupby(['DistanceFromHome', 'Attrition']).size().unstack()

plt.figure(figsize=(10, 6))

plt.bar(distance_att.index, distance_att[0], color='skyblue', label='Tidak')
plt.bar(distance_att.index, distance_att[1], bottom=distance_att[0], color='salmon', label='Ya')

plt.xlabel('Jarak dari Rumah ke Tempat Kerja (Miles)')
plt.ylabel('Jumlah')
plt.title('Jumlah Orang Berdasarkan Jarak Tempuh dari Rumah ke Tempat Kerja')

plt.legend()

plt.show()

# Print hasil plot
print("Distribusi jumlah orang berdasarkan jarak tempuh dari rumah ke tempat kerja:")
print(distance_att)

"""Distribusi jumlah orang yang mengalami attrition cenderung lebih tinggi pada jarak tempuh yang pendek (1-3 mil) dan meningkat lagi pada jarak tempuh yang lebih jauh (4-9 mil). Namun, pada jarak tempuh yang sangat jauh (10 mil atau lebih), jumlah orang yang mengalami attrition cenderung menurun. Rekomendasi dapat berfokus pada meningkatkan kualitas lingkungan kerja bagi karyawan yang harus melakukan perjalanan jarak jauh, seperti menawarkan fasilitas transportasi atau program kerja jarak jauh jika memungkinkan. Selain itu, perusahaan juga dapat mempertimbangkan strategi retensi untuk karyawan yang berada pada jarak tempuh yang pendek, mungkin dengan mengevaluasi faktor-faktor yang mempengaruhi kepuasan kerja dan keseimbangan kehidupan kerja.

# CONCLUSION:
Berdasarkan analisis korelasi antara fitur-fitur dan tingkat attrition, dapat disimpulkan bahwa terdapat beberapa fitur yang memiliki korelasi positif yang cukup signifikan dengan kecenderungan attrition di antara karyawan. Fitur-fitur seperti "MonthlyIncome", "JobLevel", "TotalWorkingYears", dan "Age" memiliki hubungan yang kuat dengan kemungkinan terjadinya attrition. Sebaliknya, fitur-fitur lainnya memiliki korelasi yang lebih rendah.

Hal ini menunjukkan bahwa faktor-faktor seperti tingkat pendapatan bulanan, tingkat jabatan, pengalaman kerja, dan usia karyawan dapat menjadi pertimbangan penting dalam memahami dan mengelola potensi attrition di tempat kerja. Oleh karena itu, pemantauan dan manajemen yang cermat terhadap kondisi dan kebutuhan karyawan, terutama dalam hal kompensasi, pengembangan karir, dan keseimbangan pekerjaan-hidup, dapat membantu mengurangi risiko attrition dan mempertahankan keberlangsungan organisasi.

# Korelasi antara Fitur kategorik dengan Kolom Attrition
"""

categorical_columns = df.select_dtypes(include=['object']).columns

for column in categorical_columns:
    if column != 'Attrition':
        contingency_table = pd.crosstab(df['Attrition'], df[column])

        chi2, p_value, dof, expected = chi2_contingency(contingency_table)

        print(f"Korelasi antara 'Attrition' dan '{column}':")
        print("Nilai Chi-square:", chi2)
        print("p-value:", p_value)
        print()

        # Plot tabel kontingensi
        plt.figure(figsize=(8, 6))
        sns.heatmap(contingency_table, annot=True, fmt='d', cmap='YlGnBu')
        plt.title(f"Contingency Table: Attrition vs {column}")
        plt.xlabel(column)
        plt.ylabel("Attrition")
        plt.show()

categorical_columns = df.select_dtypes(include=['object']).columns

correlation_results = []

for column in categorical_columns:
    if column != 'Attrition':
        contingency_table = pd.crosstab(df['Attrition'], df[column])

        chi2, p_value, dof, expected = chi2_contingency(contingency_table)

        correlation_results.append({
            'Column': column,
            'Chi-Square': chi2,
            'p-value': p_value
        })

sorted_results = sorted(correlation_results, key=lambda x: x['Chi-Square'], reverse=True)

for result in sorted_results:
    print(f"Korelasi antara 'Attrition' dan '{result['Column']}':")
    print("Nilai Chi-square:", result['Chi-Square'])
    print("p-value:", result['p-value'])
    print()

"""Dari hasil tersebut, kita dapat melihat bahwa variabel 'JobRole' dan 'OverTime' memiliki nilai Chi-square yang paling tinggi, yaitu 76.9978 dan 71.2629. Ini menunjukkan bahwa ada hubungan yang signifikan antara atribut ini dengan atribut 'Attrition'.

Variabel 'MaritalStatus' juga memiliki nilai Chi-square yang cukup tinggi, yaitu 44.4031, menunjukkan bahwa status perkawinan juga dapat menjadi faktor yang berpengaruh terhadap keputusan attrition.

Di sisi lain, variabel 'EducationField', 'BusinessTravel', dan 'Department' memiliki nilai Chi-square yang lebih rendah, masing-masing 15.5213, 14.3324, dan 9.3573. Ini menunjukkan bahwa hubungan antara variabel ini dengan 'Attrition' mungkin tidak sekuat variabel lainnya.

Variabel 'Gender' memiliki nilai Chi-square yang paling rendah, yaitu 3.3478, dan p-value yang tinggi, menunjukkan bahwa tidak ada hubungan yang signifikan antara jenis kelamin dan kecenderungan attrition.
"""

job_role_att = df[df['Attrition'].isin([0, 1])].groupby(['JobRole', 'Attrition']).size().unstack()

plt.figure(figsize=(10, 6))

plt.bar(job_role_att.index, job_role_att[0], color='skyblue', label='Tidak')
plt.bar(job_role_att.index, job_role_att[1], bottom=job_role_att[0], color='salmon', label='Ya')

plt.xlabel('Peran Pekerjaan (Job Role)')
plt.ylabel('Jumlah')
plt.title('Jumlah Karyawan Berdasarkan Peran Pekerjaan dengan dan tanpa Attrition')

plt.xticks(rotation=90)
plt.legend()

plt.show()

# Print hasil plot
print("Distribusi jumlah orang berdasarkan peran pekerjaan (Job Role) dengan dan tanpa Attrition:")
print(job_role_att)

"""Distribusi jumlah orang berdasarkan peran pekerjaan (Job Role) menunjukkan bahwa posisi **Laboratory Technician, Research Scientist, Sales Executive,** dan **Sales Representative** memiliki tingkat attrition yang tinggi. Rekomendasi yang dapat dilakukan adalah evaluasi kondisi kerja, pengembangan karir, perbaikan lingkungan kerja, dan pengelolaan kinerja yang lebih baik untuk meningkatkan kepuasan kerja dan retensi karyawan."""

overtime_att = df[df['Attrition'].isin([0, 1])].groupby(['OverTime', 'Attrition']).size().unstack()

plt.figure(figsize=(10, 6))

plt.bar(overtime_att.index, overtime_att[0], color='skyblue', label='Tidak', zorder=3)
plt.bar(overtime_att.index, overtime_att[1], bottom=overtime_att[0], color='salmon', label='Ya', zorder=3)

plt.xlabel('Lembur (OverTime)')
plt.ylabel('Jumlah')
plt.title('Jumlah Karyawan Lembur dengan dan tanpa Attrition')

plt.legend()
plt.show()

# Print hasil plot
print("Distribusi jumlah orang berdasarkan lembur (OverTime):")
print(overtime_att)

"""
Berdasarkan distribusi jumlah karyawan lembur (OverTime), dapat disimpulkan bahwa lebih banyak karyawan yang tidak lembur dibandingkan yang lembur. Namun, proporsi karyawan yang mengalami attrition lebih tinggi di antara mereka yang lembur.

rekomendasi yang dapat dilakukan adalah Pertimbangkan strategi untuk mengelola waktu dan tugas agar meminimalkan lembur yang berlebihan dan mengurangi risiko attrition."""

marital_status_att = df[df['Attrition'].isin([0, 1])].groupby(['MaritalStatus', 'Attrition']).size().unstack()

plt.figure(figsize=(10, 6))

plt.bar(marital_status_att.index, marital_status_att[0], color='skyblue', label='Tidak')
plt.bar(marital_status_att.index, marital_status_att[1], bottom=marital_status_att[0], color='salmon', label='Ya')

plt.xlabel('Status Pernikahan (Marital Status)')
plt.ylabel('Jumlah')
plt.title('Jumlah Karyawan Berdasarkan Status Pernikahan dengan dan tanpa Attrition')

plt.xticks(rotation=45)
plt.legend()

plt.show()

# Print hasil plot
print("Distribusi jumlah orang berdasarkan status pernikahan (Marital Status) dengan dan tanpa Attrition:")
print(marital_status_att)

"""Dari distribusi jumlah orang berdasarkan status pernikahan (Marital Status), terlihat bahwa karyawan yang status pernikahannya **Single** memiliki tingkat attrition yang **lebih tinggi dibandingkan dengan yang lainnya**. Rekomendasi tindakan yang dapat diambil adalah dengan memberikan program dukungan kesejahteraan mental dan sosial, meningkatkan keseimbangan kerja-hidup, dan menyediakan lebih banyak kesempatan pengembangan karir untuk karyawan yang berstatus single.

# CONCLUSION:

Analisis menunjukkan bahwa faktor-faktor seperti posisi pekerjaan, lembur, dan status pernikahan memiliki hubungan yang kuat dengan tingkat karyawan yang keluar dari perusahaan. Temuan ini memberikan wawasan yang berharga bagi perusahaan untuk mengenali pola-pola yang dapat membantu mengurangi jumlah karyawan yang keluar. Dengan pemahaman ini, perusahaan dapat mengambil langkah-langkah proaktif, seperti meningkatkan kepuasan kerja, mengelola waktu kerja dengan lebih efisien, atau memberikan lebih banyak peluang karir kepada karyawan yang belum menikah.
"""

attrition_counts = df['Attrition'].value_counts()

attrition_yes = attrition_counts.get(1, 0)
attrition_no = attrition_counts.get(0, 0)
attrition_unknown = attrition_counts.get(2, 0)

labels = ['Attrition (Yes)', 'No Attrition', 'Unknown']
employees_count = [attrition_yes, attrition_no, attrition_unknown]

plt.figure(figsize=(8, 6))
plt.pie(employees_count, labels=labels, autopct='%1.1f%%', startangle=140)
plt.title('Employee Attrition Rate')
plt.axis('equal')
plt.show()

"""rasio rate attrition sekitar 12.2%

## Data Preparation / Preprocessing

Menghapus salah satu pasangan kolom yang korelasinya tinggi. Tidak ada standar pasti untuk menentukan nilai korelasi yang dianggap tinggi, tetapi biasanya angka 0.7 digunakan sebagai acuan.
"""

correlation_matrix = df.corr(numeric_only=True).abs()
upper = correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool))
to_drop_hicorr = [column for column in upper.columns if any(upper[column] > 0.7)]

to_drop_hicorr

df.drop(to_drop_hicorr, axis=1, inplace=True)
print("Ukuran DataFrame setelah penghapusan kolom:", df.shape)

"""Check categorical feature"""

df.select_dtypes(include='object').nunique()

"""Masih aman tidak ada kolom yang di dominasi oleh salah satu nilai"""

df.nunique()

"""Bining kolom Age"""

def bin_age(age):
    if age < 30:
        return '-30 tahun'
    elif 30 <= age < 40:
        return '30-39 tahun'
    elif 40 <= age < 50:
        return '40-49 tahun'
    else:
        return '50+ tahun'

df['AgeGroup'] = df['Age'].apply(bin_age)
print(df['AgeGroup'].value_counts())

"""Menghapus kolom 'Age'"""

df.drop(columns=['Age'], inplace=True)

"""Binning pada kolom 'DailyRate'"""

bins = [0, 600, 1000, 1300, np.inf]
labels = ['0-599', '600-999', '1000-1299', '1300+']

df['DailyRateGroup'] = pd.cut(df['DailyRate'], bins=bins, labels=labels, right=False)
print(df['DailyRateGroup'].value_counts())

"""Menghapus kolom 'DailyRate'"""

df.drop(columns=['DailyRate'], inplace=True)

"""Binning kolom 'MonthlyRate'"""

bins = [0, 5000, 10000, 15000, 20000, np.inf]
labels = ['0-4.999', '5.000-9.999', '10.000-14.999', '15.000-19.999', '20.000+']
df['MonthlyRateGroup'] = pd.cut(df['MonthlyRate'], bins=bins, labels=labels, right=False)
print(df['MonthlyRateGroup'].value_counts())

"""Menghaous kolom 'MonthlyRate'"""

df.drop(columns=['MonthlyRate'], inplace=True)

"""Binning untuk kolom DistanceFromHome (miles), HourlyRate (per hour), YearsAtCompany (years)"""

bins_distance = [0, 5, 10, 15, 20, np.inf]
labels_distance = ['0-4 miles', '5-9 miles', '10-14 miles', '15-19 miles', '20+ miles']
df['DistanceGroup'] = pd.cut(df['DistanceFromHome'], bins=bins_distance, labels=labels_distance)

bins_hourly_rate = [0, 50, 70, np.inf]
labels_hourly_rate = ['0-49', '50-69', '70+']
df['HourlyRateGroup'] = pd.cut(df['HourlyRate'], bins=bins_hourly_rate, labels=labels_hourly_rate)

bins_years_company = [0, 5, 10, 15, np.inf]
labels_years_company = ['0-4 years', '5-9 years', '10-14 years', '15+ years']
df['YearsAtCompanyGroup'] = pd.cut(df['YearsAtCompany'], bins=bins_years_company, labels=labels_years_company, include_lowest=True)

print("Distance Group:")
print(df['DistanceGroup'].value_counts())

print("\nHourly Rate Group:")
print(df['HourlyRateGroup'].value_counts())

print("\nYears at Company Group:")
print(df['YearsAtCompanyGroup'].value_counts())

"""Menghapus kolom DistanceFromHome, HourlyRate, YearsAtCompany"""

df.drop(columns=['DistanceFromHome', 'HourlyRate', 'YearsAtCompany'], inplace=True)
df.head()

df.info()

"""Mengubah tipe data category menjadi object"""

df['DailyRateGroup'] = df['DailyRateGroup'].astype('object')
df['MonthlyRateGroup'] = df['MonthlyRateGroup'].astype('object')
df['DistanceGroup'] = df['DistanceGroup'].astype('object')
df['HourlyRateGroup'] = df['HourlyRateGroup'].astype('object')
df['YearsAtCompanyGroup'] = df['YearsAtCompanyGroup'].astype('object')

df.info()

"""Mengganti missing value yang tadinya di isi nilai 2 udah memudahkan proses EDA sekarang akan di isi dari nilai median"""

median_attrition = df['Attrition'].median()
df['Attrition'].replace(2, median_attrition, inplace=True)

df['Attrition'] = df['Attrition'].astype(int)

print(df['Attrition'].value_counts())

"""## Modeling

### Dataset Splitting
"""

X = df.drop('Attrition', axis=1)
y = df['Attrition']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

numerical_cols = ['Education', 'EnvironmentSatisfaction', 'JobInvolvement', 'JobLevel',
                  'JobSatisfaction', 'NumCompaniesWorked', 'PercentSalaryHike',
                  'RelationshipSatisfaction', 'StockOptionLevel', 'TrainingTimesLastYear',
                  'WorkLifeBalance', 'YearsSinceLastPromotion']

categorical_cols = ['BusinessTravel', 'Department', 'EducationField', 'Gender',
                    'JobRole', 'MaritalStatus', 'OverTime', 'AgeGroup',
                    'DailyRateGroup', 'MonthlyRateGroup', 'DistanceGroup',
                    'HourlyRateGroup', 'YearsAtCompanyGroup']

numerical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_cols),
        ('cat', categorical_transformer, categorical_cols)
    ])

"""Memakai SMOTE untuk menangani data yang IMBALANCE"""

X_train_processed = preprocessor.fit_transform(X_train)
X_test_processed = preprocessor.transform(X_test)

smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train_processed, y_train)

"""# Model Logistic Regression"""

logistic_model = Pipeline(steps=[
    ('classifier', LogisticRegression(solver='liblinear', max_iter=1000))
])

param_space_lr = {
    "classifier__C": np.logspace(-3, 3, 7),
    "classifier__fit_intercept": [True, False],
    "classifier__penalty": ['l1', 'l2'],
    "classifier__tol": [0.001, 0.01, 0.1]
}

model_lr = GridSearchCV(logistic_model, param_grid=param_space_lr, cv=3)

model_lr.fit(X_train_resampled, y_train_resampled)

print("Best Parameters (Logistic Regression):", model_lr.best_params_)
print("Training Accuracy (Logistic Regression):", model_lr.score(X_train_resampled, y_train_resampled))
print("Model Best Score (Logistic Regression):", model_lr.best_score_)
print("Test Accuracy (Logistic Regression):", model_lr.score(X_test_processed, y_test))

"""# Model XGBoost"""

xgb_model = Pipeline(steps=[
    ('classifier', XGBClassifier())
])

param_space_xgb = {
    'classifier__n_estimators': [10, 20 ,50, 100],
    'classifier__max_depth': [3, 5, 7, 10],
    'classifier__gamma': [0.01, 0.1, 0.2, 0.3]
}

model_xgb = GridSearchCV(xgb_model, param_grid=param_space_xgb, cv=5)

model_xgb.fit(X_train_resampled, y_train_resampled)

print("Best Parameters:", model_xgb.best_params_)
print("Training Accuracy:", model_xgb.score(X_train_resampled, y_train_resampled))
print("Model Best Score (XGBoost):", model_xgb.best_score_)
print("Test Accuracy:", model_xgb.score(X_test_processed, y_test))

"""## Evaluation"""

y_pred_lr = model_lr.predict(X_test_processed)

print("\nConfusion Matrix Logistic Regression:")
print(confusion_matrix(y_test, y_pred_lr))

print("\nClassification Report Logistic Regression:")
print(classification_report(y_test, y_pred_lr))

y_pred_xgb = model_xgb.predict(X_test_processed)

print("\nConfusion Matrix XGBoost:")
print(confusion_matrix(y_test, y_pred_xgb))

print("\nClassification Report XGBoost:")
print(classification_report(y_test, y_pred_xgb))

y_proba_lr = model_lr.predict_proba(X_test_processed)[:, 1]
y_proba_xgb = model_xgb.predict_proba(X_test_processed)[:, 1]

auc_lr = roc_auc_score(y_test, y_proba_lr)
auc_xgb = roc_auc_score(y_test, y_proba_xgb)

fpr_lr, tpr_lr, _ = roc_curve(y_test, y_proba_lr)
fpr_xgb, tpr_xgb, _ = roc_curve(y_test, y_proba_xgb)

plt.figure(figsize=(8, 6))
plt.plot(fpr_lr, tpr_lr, label=f'Logistic Regression (AUC = {auc_lr:.2f})', color='blue')
plt.plot(fpr_xgb, tpr_xgb, label=f'XGBoost (AUC = {auc_xgb:.2f})', color='red')
plt.plot([0, 1], [0, 1], color='black', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.grid(True)
plt.show()

"""Dari hasil modeling ini saya memilih Logistic Regression karena lebih baik dalam memperkirakan karyawan yang mungkin keluar dari perusahaan (attrition) dengan tingkat keakuratan yang lebih tinggi, terutama dalam menemukan karyawan yang sebenarnya akan keluar (recall). Meskipun secara keseluruhan akurasi sedikit lebih rendah dibandingkan dengan XGBoost, namun kemampuannya dalam menangkap karyawan yang mungkin keluar dianggap lebih penting.

Save preprocesing dan model untuk membuat aplikasi prediksi attrition menggunakan streamlit
"""

joblib.dump(preprocessor, 'preprocessor.pkl')
joblib.dump(model_lr, 'logistic_regression_model.pkl')